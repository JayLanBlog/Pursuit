#pragma once
#include "config/platform_def.h"
#include "section/martrix/cg_def.h"
using namespace Seek;
namespace DRAW {
	namespace GL {
#if defined(GRAPHICS_API_OPENGL_33) || defined(GRAPHICS_API_OPENGL_ES2)


		// Choose the current matrix to be transformed
		void MatrixMode(int mode);

		// Push the current matrix into PLGL.State.stack
		void PushMatrix(void);

		// Polattest inserted matrix from PLGL.State.stack
		void PopMatrix(void);

		// Ret current matrix to identity matrix
		void LoadIdentity(void);


		// Multiply the current matrix by a translation matrix
		void Translatef(float x, float y, float z);

		// Muiply the current matrix by a perspective matrix generated by parameters
		void Frustum(double left, double right, double bottom, double top, double znear, double zfar);

		// Muiply the current matrix by a scaling matrix
		void Scalef(float x, float y, float z);


		// Multiply the current matrix by another matrix
		void MultMatrixf(const float* matf);

		// Multiply the current matrix by a rotation matrix
		// NOTE: The provided angle must be in degrees
		void Rotatef(float angle, float x, float y, float z);

		// Multiply the current matrix by an orthographic matrix generated by parameters
		void Ortho(double left, double right, double bottom, double top, double znear, double zfar);

		// Set the viewport area (transformation from normalized device coordinates to window coordinates)
		// NOTE: We store current viewport dimensions
		void Viewport(int x, int y, int width, int height);

		// Set clip planes distances
		void SetClipPlanes(double nearPlane, double farPlane);
		// Get cull plane distance far
		double GetCullDistanceFar(void);

		double GetCullDistanceNear(void);

		// Get internal view offset matrix for stereo render (selected eye)
		Matrix GetMatrixViewOffsetStereo(int eye);

	
#endif
	}

}